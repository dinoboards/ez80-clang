#!/bin/bash

# Define the assembler and archiver
AS=ez80-as
AR=ez80-ar
CLANG=ez80-clang
LINKER_SCRIPT=${EZ80_CLANG_LS_PATH}/cpm-64k.ld

set -e
ASFLAGS="-march=ez80+full"
CFLAGS="-mllvm -z80-print-zero-offset -target ez80-none-elf -nostdinc -isystem ${EZ80_CLANG_SYSTEM_INCLUDE_PATH} -Wall -Wextra -Wunreachable-code -Werror -Wa,-march=ez80"
LDFLAGS="-T ${LINKER_SCRIPT} --relax -O1 --strip-discarded --orphan-handling=error -L${EZ80_CLANG_LIB_PATH} -lcrt"

# Initialize output directory
OUTPUT_DIR=""

# Optional include directory
INCLUDE_DIR=""

# Optimisation type
OPTIMISE_TYPE="size"

# Temporary array to hold non-option arguments
ARGS=()

# First pass: parse options
while [[ "$#" -gt 0 ]]; do
  case $1 in
    --output-dir)
      OUTPUT_DIR="$2"
      shift 2
      ;;
    --iquote)
      INCLUDE_DIR="$2"
      shift 2
      ;;
    --optimise)
      OPTIMISE_TYPE="$2"
      shift 2
      ;;
    --help)
      echo "Usage: $0 [--output-dir dir] [--iquote dir] [--optimise type] [output] source-files..."
      echo "Options:"
      echo "  --output-dir dir  Specify the output directory for the binary file."
      echo "  --iquote dir      Specify an additional include directory for the compiler."
      echo "  --optimise type   Specify the optimisation type (size or speed)."
      echo "  --help            Display this help message."
      echo
      echo "Arguments:"
      echo "  output            The name of the output .com file. If not supplied,"
      echo "                    the name is inferred from the name of the first source-file."
      echo "  source-files      The input files to be compiled or assembled. Must be"
      echo "                    .asm or .c files."
      exit 0
      ;;
    *)
      ARGS+=("$1")
      shift
      ;;
  esac
done

# Set optimisation flag
if [[ "$OPTIMISE_TYPE" == "size" ]]; then
  CFLAGS="$CFLAGS -Oz"
elif [[ "$OPTIMISE_TYPE" == "speed" ]]; then
  CFLAGS="$CFLAGS -O3"
fi

# Restore positional parameters
set -- "${ARGS[@]}"


# Check if at least one argument is provided
if [ "$#" -lt 1 ]; then
  echo "Usage: $0 [--output-dir dir] output_binary input_files..."
  exit 1
fi
# Output binary file
OUTPUT_BINARY=$1

EXT="${OUTPUT_BINARY##*.}"
if [ "$(echo "$EXT" | tr '[:upper:]' '[:lower:]')" != "com" ]; then
  OUTPUT_BINARY="${OUTPUT_BINARY%.*}.com"
else
  shift
fi

if [ -n "$OUTPUT_DIR" ]; then
  OUTPUT_BINARY="${OUTPUT_DIR%/}/$(basename "$OUTPUT_BINARY")"
fi

# Add include directory to CFLAGS if specified
if [ -n "$INCLUDE_DIR" ]; then
  CFLAGS="$CFLAGS -iquote $INCLUDE_DIR"
fi

# Check file extension
FILE_TYPES_OK=1
for FILE in "$@"; do
  EXT="${FILE##*.}"

  if [ "$EXT" != "c" ] && [ "$EXT" != "asm" ]; then
    echo "Unsupported file type: ${FILE}"
    FILE_TYPES_OK=0
  fi
done

if [ "$FILE_TYPES_OK" -eq 0 ]; then
  exit 1
fi

# Arrays to hold object files
OBJECT_FILES=()

cleanup() {
  rm -f "${OBJECT_FILES[@]}"
}

trap cleanup EXIT

# Compile and assemble each input file
for FILE in "$@"; do
  EXT="${FILE##*.}"
  BASENAME="${FILE%.*}"

  if [ "$EXT" == "c" ]; then
    echo "Compiling $FILE -> $BASENAME.c.o"
    ez80-clang ${CFLAGS} "$FILE"  -c -o  "$BASENAME.c.o"
    OBJECT_FILES+=("$BASENAME.c.o")
  elif [ "$EXT" == "asm" ]; then
    echo "Assembling $FILE -> $BASENAME.o"
    ez80-as -march=ez80+full ${FILE} -o "$BASENAME.o"
    OBJECT_FILES+=("$BASENAME.o")
  else
    echo "Unsupported file type: $FILE"
    exit 1
  fi
done

# Link object files into the final executable binary
echo "Linking ${OBJECT_FILES[*]} -> $OUTPUT_BINARY"

ez80-ld ${LDFLAGS} "${OBJECT_FILES[@]}" -llibc -lcrt -lcpm --oformat binary -o "$OUTPUT_BINARY"

echo "Build complete: $OUTPUT_BINARY"
