#!/bin/bash

# Define the assembler and archiver
AS=ez80-as
AR=ez80-ar
CLANG=ez80-clang
LINKER_SCRIPT=${EZ80_CLANG_LS_PATH}/cpm-64k.ld

set -e
ASFLAGS="-march=ez80+full"
CFLAGS="-mllvm -z80-print-zero-offset -target ez80-none-elf -nostdinc -isystem ${EZ80_CLANG_SYSTEM_INCLUDE_PATH} -Wall -Wextra -Wunreachable-code -Werror -Wa,-march=ez80"
LDFLAGS="--relax -O1 --strip-discarded --orphan-handling=error -L${EZ80_CLANG_LIB_PATH} -lcrt"

# Initialize output directory
OUTPUT_DIR=""

# Optional include directory
INCLUDE_DIR=""

# Optimisation type
OPTIMISE_TYPE="size"

# Default library type
LIB_TYPE="v99x8-standard"

# Set default value for MEM_MODEL
MEM_MODEL="64KB"

MEM_MODEL_SUPPLIED=0

# Temporary array to hold non-option arguments
ARGS=()

# First pass: parse options
while [[ "$#" -gt 0 ]]; do
  case $1 in
    --output-dir)
      OUTPUT_DIR="$2"
      shift 2
      ;;
    --iquote)
      INCLUDE_DIR="$2"
      shift 2
      ;;
    --optimise)
      OPTIMISE_TYPE="$2"
      shift 2
      ;;
    --lib)
      if [[ "$2" == "v99x8-standard" || "$2" == "v99x8-hdmi" ]]; then
        LIB_TYPE="$2"
      else
        echo "Invalid value for --lib. Allowed values are v99x8-standard or v99x8-hdmi."
        exit 1
      fi
      shift 2
      ;;
    --mem-model)
      if [[ "$2" == "64KB" || "$2" == "2MB" ]]; then
        MEM_MODEL="$2"
        MEM_MODEL_SUPPLIED=1
      else
        echo "Invalid value for --mem-model. Allowed values are 64KB or 2MB."
        exit 1
      fi
      shift 2
      ;;
    -D*)
      CLANG_DEFINES+=("$1")
      shift
      ;;
    --define-macro)
      CLANG_DEFINES+=("-D$2")
      shift 2
      ;;
    --define-macro=*)
      CLANG_DEFINES+=("-D${1#*=}")
      shift
      ;;
    --defsym)
      AS_DEFINES+=("--defsym ${2}")
      shift 2
      ;;
      --defsym=*)
      AS_DEFINES+=("--defsym ${1#*=}")
      shift
      ;;
    --help)
      echo "Usage: $0 [--output-dir dir] [--iquote dir] [--optimise type] [output] source-files..."
      echo "Options:"
      echo "  --output-dir dir   Specify the output directory for the binary file."
      echo "  --iquote dir       Specify an additional include directory for the compiler."
      echo "  --optimise type    Specify the optimisation type (size or speed)."
      echo "  --lib type         Specify the library type: v99x8-standard(default) or v99x8-hdmi."
      echo "  --mem-model type   Specify the memory model: 64KB (default) or 2MB."
      echo "  -D<macro>=<value>  Define c <macro> to <value> (or 1 if <value> omitted)"
      echo "    --define-macro <macro>          (alternative form)"
      echo "    --define-macro <macro>=<value>  (alternative form)"
      echo "  --defsym SYM=value Define assembler symbol SYM to given value for"
      echo "  --help             Display this help message."
      echo
      echo "Arguments:"
      echo "  output             The name of the output .com file. If not supplied,"
      echo "                     the name is inferred from the name of the first source-file."
      echo "  source-files       The input files to be compiled or assembled. Must be"
      echo "                     .asm or .c files."
      exit 0
      ;;
    *)
      ARGS+=("$1")
      shift
      ;;
  esac
done

# Set optimisation flag
if [[ "$OPTIMISE_TYPE" == "size" ]]; then
  CFLAGS="$CFLAGS -Oz"
elif [[ "$OPTIMISE_TYPE" == "speed" ]]; then
  CFLAGS="$CFLAGS -O3"
fi

# Restore positional parameters
set -- "${ARGS[@]}"


# Check if at least one argument is provided
if [ "$#" -lt 1 ]; then
  echo "Usage: $0 [--output-dir dir] output_binary input_files..."
  exit 1
fi
# Output binary file
OUTPUT_BINARY=$1

EXT="${OUTPUT_BINARY##*.}"

if [ "$MEM_MODEL" == "2MB" ]; then
  if [ "$(echo "$EXT" | tr '[:upper:]' '[:lower:]')" != "exe" ]; then
    OUTPUT_BINARY="${OUTPUT_BINARY%.*}.exe"
  else
    shift
  fi
else
  if [ "$(echo "$EXT" | tr '[:upper:]' '[:lower:]')" != "com" ]; then
    OUTPUT_BINARY="${OUTPUT_BINARY%.*}.com"
  else
    shift
  fi
fi

if [ -n "$OUTPUT_DIR" ]; then
  OUTPUT_BINARY="${OUTPUT_DIR%/}/$(basename "$OUTPUT_BINARY")"
fi

# Add include directory to CFLAGS if specified
if [ -n "$INCLUDE_DIR" ]; then
  CFLAGS="$CFLAGS -iquote $INCLUDE_DIR"
fi

# Check file extension
FILE_TYPES_OK=1
for FILE in "$@"; do
  EXT="${FILE##*.}"

  if [ "$EXT" != "c" ] && [ "$EXT" != "asm" ]; then
    echo "Unsupported file type: ${FILE}"
    FILE_TYPES_OK=0
  fi
done

if [ "$FILE_TYPES_OK" -eq 0 ]; then
  exit 1
fi

# Create a unique temporary directory
TMP_DIR=$(mktemp -d)

# Arrays to hold object files
OBJECT_FILES=()

cleanup() {
  rm -rf "$TMP_DIR"
}

trap cleanup EXIT

# Compile and assemble each input file
for FILE in "$@"; do
  EXT="${FILE##*.}"
  BASENAME="${FILE%.*}"
  TMP_BASENAME="$TMP_DIR/$(basename "$BASENAME")"

  if [ "$EXT" == "c" ]; then
    echo "Compiling $FILE"
    ez80-clang ${CFLAGS} ${CLANG_DEFINES[@]} "$FILE"  -c -o  "$TMP_BASENAME.c.o"
    OBJECT_FILES+=("$TMP_BASENAME.c.o")
  elif [ "$EXT" == "asm" ]; then
    echo "Assembling $FILE with ${AS_DEFINES}"
    ez80-as ${AS_DEFINES[@]} -march=ez80+full ${FILE} -o "$TMP_BASENAME.o"
    OBJECT_FILES+=("$TMP_BASENAME.o")
  else
    echo "Unsupported file type: $FILE"
    exit 1
  fi
done

# Link object files into the final executable binary
echo "Building $OUTPUT_BINARY"

if [ "$MEM_MODEL" == "2MB" ]; then
  LINKER_SCRIPT=${EZ80_CLANG_LS_PATH}/cpm-2mb.ld
  LDFLAGS="--whole-archive -lcrtexe --no-whole-archive $LDFLAGS"

  ez80-ld -T ${LINKER_SCRIPT} ${LDFLAGS} "${OBJECT_FILES[@]}" --start-group -llibc -lcrt -lcpm -l${LIB_TYPE} -lez80 -lmalloc -lio -lez80rc --end-group --oformat binary -o "${OUTPUT_BINARY}.020000"

  LINKER_SCRIPT=${EZ80_CLANG_LS_PATH}cpm-2mb-4.ld
  ez80-ld -T ${LINKER_SCRIPT} ${LDFLAGS} "${OBJECT_FILES[@]}" --start-group -llibc -lcrt -lcpm -l${LIB_TYPE} -lez80 -lmalloc -lio -lez80rc --end-group --oformat binary -o "${OUTPUT_BINARY}.040000"

  create-with-relocation-table.sh "${OUTPUT_BINARY}.020000" "${OUTPUT_BINARY}.040000" "${OUTPUT_BINARY}"
else
  ez80-ld -T ${LINKER_SCRIPT} ${LDFLAGS} "${OBJECT_FILES[@]}" --start-group -llibc -lcrt -lcpm -l${LIB_TYPE} -lez80 -lmalloc -lio -lez80rc --end-group --oformat binary -o "$OUTPUT_BINARY"

fi

echo "Build complete: $OUTPUT_BINARY"
